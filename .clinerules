# Cline Rules for LoungeApp

## Project Intelligence

- **Memory Management:** Due to session memory resets, maintaining the `memory-bank/` directory is critical. All core files (`projectbrief.md`, `productContext.md`, `activeContext.md`, `systemPatterns.md`, `techContext.md`, `progress.md`) MUST be read at the start of every session and updated as needed.
- **Error Resolution:** When encountering errors, systematically try common solutions. For React Native "Unable to load script" errors, the first step is usually to ensure the Metro bundler is running.
- **Image Handling:** Images are served from the `partner-backend` (from its `/public/images` directory, accessible via the `/images/` route). The React Native app constructs full image URLs and uses a custom caching mechanism.

## User Preferences & Workflow

- User prefers to explore alternative solutions (like custom implementation) when a preferred library has compatibility issues, rather than forcing installation or making major downgrades (e.g., React version).
- (To be defined further based on interactions)

## Project-Specific Patterns

- **Custom Image Caching:**
    - A custom image caching solution is implemented using:
        - `src/services/ImageCache.ts`: Service using `react-native-fs` for file storage and `@react-native-async-storage/async-storage` for metadata.
        - `src/components/CachedImage.tsx`: Wrapper component that uses the `ImageCache` service.
    - This pattern was chosen over `react-native-fast-image` due to React 19 compatibility issues.
- **Backend Image Serving:**
    - `partner-backend/server.ts` uses `express.static(path.join(__dirname, '../public'))` to serve images. Compiled `__dirname` points to `dist/`, so `../public` correctly resolves to `project_root/partner-backend/public/`.
- (To be defined as the project evolves)

## Known Challenges

- **Initial Setup:** Ensuring the development environment is correctly configured for React Native.
- **React 19 Compatibility:** React 19.0.0 can cause peer dependency conflicts with some React Native libraries (e.g., `react-native-fast-image`). This may necessitate custom solutions or careful library vetting.
- **Backend Deployment:** Ensuring the `partner-backend` is reliably deployed and accessible (e.g., on Render) is critical for features relying on it, such as API data fetching and image serving.

## Evolution of Project Decisions

- **Image Caching Library:** Initially, `react-native-fast-image` was considered. Due to peer dependency conflicts with React 19, a custom image caching solution was developed instead.
- (To be documented as decisions are made)

## Tool Usage Patterns

- `write_to_file` is used for creating initial Memory Bank files and new source code files.
- `replace_in_file` is used for targeted modifications to existing source code.
- `execute_command` is used for:
    - Running development servers and other build/run commands.
    - File system operations like copying (`cp -R`) and deleting (`rm -rf`) files/directories.
    - Installing npm packages (`npm install`).
- `read_file` is used to inspect existing file contents before modification or for context.
- `list_files` is used to verify file/directory structures.
- `ask_followup_question` is used for clarifications or when multiple valid paths exist.
